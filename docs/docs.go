// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://akazwz.com",
        "contact": {
            "name": "API Support",
            "url": "https://akazwz.com",
            "email": "akazwz@pm.me"
        },
        "license": {
            "name": "MIT",
            "url": "https://mit-license.org/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/basic-info": {
            "post": {
                "description": "新建简历基本信息",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "basicInfo"
                ],
                "summary": "新建基本信息",
                "parameters": [
                    {
                        "description": "json",
                        "name": "basicInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.BasicInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.BasicInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/resume": {
            "post": {
                "description": "新建简历",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resume"
                ],
                "summary": "新建简历",
                "parameters": [
                    {
                        "description": "json",
                        "name": "Resume",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Resume"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Resume"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/resume/{resume_id}": {
            "delete": {
                "description": "删除简历",
                "tags": [
                    "resume"
                ],
                "summary": "删除简历",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Resume ID",
                        "name": "resume_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "model.BasicInfo": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "custom_info": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "marriage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "native_place": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "political_status": {
                    "type": "integer"
                },
                "profile_pic": {
                    "type": "string"
                },
                "resume_id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "work_experience": {
                    "type": "string"
                }
            }
        },
        "model.Resume": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "resume_id": {
                    "type": "string"
                },
                "resume_name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "request.BasicInfo": {
            "type": "object",
            "required": [
                "birthday",
                "email",
                "name",
                "phone_number"
            ],
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "custom_info": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "description": "required 字段不能为空和初始值",
                    "type": "integer"
                },
                "marriage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "native_place": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "political_status": {
                    "type": "integer"
                },
                "profile_pic": {
                    "type": "string"
                },
                "resume_id": {
                    "type": "string"
                },
                "work_experience": {
                    "type": "string"
                }
            }
        },
        "request.Resume": {
            "type": "object",
            "properties": {
                "resume_name": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "description": "omitempty nil or default",
                    "type": "object"
                },
                "msg": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8000",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Golang Resume Api",
	Description: "Golang Resume ASpi",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
